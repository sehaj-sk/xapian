#!/usr/bin/make -f
#
# Copyright (C) 2004,2005,2006 Lemur Consulting Ltd
# Copyright (C) 2006,2007,2008,2009,2010,2011 Olly Betts
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# Codename we're building packages for.  For backported packages, put the
# codename (e.g. lenny or jaunty) in debian/codename.  If that file doesn't
# exist, the default is sid.
CODENAME := $(shell cat debian/codename 2>/dev/null||echo sid)

# Version without the "-N" suffix.
XAPIAN_VERSION := $(shell sed 's/.*(\([^-]*\)\(-.*\)*).*/\1/;q' debian/changelog)

# The next incompatible version - i.e. the first release of the next release
# branch.  So for XAPIAN_VERSION "1.0.<n>", this should be "1.1.0".
XAPIAN_VERSION_CEILING := $(shell echo '$(XAPIAN_VERSION)'|awk -F. '{print $$1"."$$2+1".0"}')

# '--exclude=.EXT' arguments to pass dh_install
DH_INSTALL_EXCLUDE := --exclude=.pyc --exclude=.pyo

BUILD_DEPS := debhelper (>= 7),

# Disabled due to incompatibility of GPL and PHP licence.  Uncomment to build
# your own binary packages (just don't distribute them!)
# PHP_VERSIONS := 5

ifeq ($(findstring .$(CODENAME)., .lenny.hardy.intrepid.jaunty.), )
RUBY_VERSIONS := 1.8 1.9.1
else
RUBY_VERSIONS := 1.8
endif

# The python versions to build for:
PYTHON_VERSIONS := $(shell pyversions -r debian/control)

ifeq ($(findstring .$(CODENAME)., .lenny.hardy.intrepid.jaunty.karmic.lucid.maverick.), )
USING_PYCENTRAL := 0
BUILD_DEPS += python, python-all-dev (>= 2.6.6-3~),
XB_PYTHON_VERSION := X-Dummy: Remove me once python-central support is dropped
X_PYTHON_VERSION := X-Python-Version: >= 2.3
else
USING_PYCENTRAL := 1
BUILD_DEPS += python, python-central (>= 0.4.10), python-all-dev,
XB_PYTHON_VERSION := XB-Python-Version: $${python:Versions}
X_PYTHON_VERSION := XS-Python-Version: all
# We'll need this if we ever generate different .py modules for different
# supported python versions.
#export DH_PYCENTRAL=nomove
endif

export DH_OPTIONS

export DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
    confflags += --build $(DEB_HOST_GNU_TYPE)
else
    confflags += --build $(DEB_BUILD_GNU_TYPE) --host $(DEB_HOST_GNU_TYPE)
    # Disable the testsuite when cross-compiling.
    DEB_BUILD_OPTIONS += nocheck
endif

# Handle DEB_BUILD_OPTIONS.  Note that dh_strip handles nostrip for us.
ifneq (,$(filter noopt,$(DEB_BUILD_OPTIONS)))
    # -g needed for armel to workaround unaligned relocations (#576944)
    confflags += CFLAGS="-O0 -g" CXXFLAGS="-O0 -g"
endif
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
    NUMJOBS = $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
    MAKEFLAGS += -j$(NUMJOBS)
endif
ifneq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))
    MAKE_CHECK := :
else
    MAKE_CHECK := make check
endif

# Build depends for PHP.  We need phpN-cli so we can run "make check" on
# the bindings and to get the phpapi version we need to depend on.
#
# Note that we check for /usr/bin/php-configN before trying to build PHP
# bindings below.
#
# Only the first % in the replacement part is substituted, so we need to do
# this in two goes.
BUILD_DEPS += $(PHP_VERSIONS:%=php%-dev,)
BUILD_DEPS += $(PHP_VERSIONS:%=php%-cli,)

# Build depends for Tcl.  We use Tcl's stubs mechanism, so the built
# bindings will work with any Tcl version from 8.0.6 upwards, whichever
# version they were built against.
#
# lenny/hardy onwards have a "tcl-dev" dummy package which pulls in the package
# for the current preferred version.
BUILD_DEPS += tcl-dev,# NB Trailing ',' required here!
TCLSH=/usr/bin/tclsh-default

# Build depends for Ruby.
#
# Only the first % in the replacement part is substituted, so we need to do
# this in two goes.
BUILD_DEPS += $(RUBY_VERSIONS:%=ruby%-dev,)
BUILD_DEPS += $(RUBY_VERSIONS:%=ruby%,)

# We need a versioned build dependency on libxapian-dev.
# NB Trailing ',' required here!
BUILD_DEPS += \
	libxapian-dev (>= $(XAPIAN_VERSION)), \
	libxapian-dev (<< $(XAPIAN_VERSION_CEILING)),

commonconfflags := \
	$(confflags) \
	--prefix=/usr \
	--sysconfdir=/etc

# With GCC3 and later this won't make a huge difference, but it'll save
# a bit of time and diskspace while building.
commonconfflags += --disable-dependency-tracking

maint: debian/control

maintclean: clean
	rm -f debian/control

debian/control: debian/rules debian/control.in
	rm -f debian/control.tmp
	sed -e 's/@BUILD_DEPS@/$(BUILD_DEPS)/g' \
	    -e 's/@X_PYTHON_VERSION@/$(X_PYTHON_VERSION)/g' \
	    -e 's/@XB_PYTHON_VERSION@/$(XB_PYTHON_VERSION)/g' \
	    < debian/control.in > debian/control.tmp
	for v in $(PHP_VERSIONS); do \
	    sed "s/@PHP_VERSION@/$$v/g" debian/control-php.in ;\
	done >> debian/control.tmp
	for v in $(RUBY_VERSIONS); do \
	    sed "s/@RUBY_VERSION@/$$v/g" debian/control-ruby.in ;\
	done >> debian/control.tmp
	mv debian/control.tmp debian/control

configure: configure-stamp
configure-stamp:
	dh_testdir

	# Use the latest config.sub and config.guess from the autotools-dev
	# package.
	rm -f config.sub config.guess
	ln -s /usr/share/misc/config.sub config.sub
	ln -s /usr/share/misc/config.guess config.guess

	for python in $(PYTHON_VERSIONS); do \
	    set -e; \
	    mkdir -p debian/build/$$python; \
	    cd debian/build/$$python; \
	    ../../../configure $(commonconfflags) --with-python \
		PYTHON=/usr/bin/$$python; \
	    cd ../../..; \
	done

	for v in $(PHP_VERSIONS); do \
	    c=/usr/bin/php-config$$v; \
	    if test -x $$c ; then \
		set -e; \
		mkdir -p debian/build/php$$v; \
		cd debian/build/php$$v; \
		../../../configure $(commonconfflags) --with-php PHP_CONFIG=$$c; \
		cd ../../..; \
	    fi \
	done

	for v in $(RUBY_VERSIONS); do \
	    set -e; \
	    mkdir -p debian/build/ruby$$v; \
	    cd debian/build/ruby$$v; \
	    RUBY=/usr/bin/ruby$$v; \
	    ../../../configure $(commonconfflags) --with-ruby \
		--docdir=/usr/share/doc/xapian-bindings-ruby$$v \
		RUBY=$$RUBY \
		RUBY_LIB=`$$RUBY -rrbconfig -e 'puts Config::CONFIG["rubylibdir"]'` \
		RUBY_LIB_ARCH=`$$RUBY -rrbconfig -e 'puts Config::CONFIG["archdir"]'`; \
	    cd ../../..; \
	done

	mkdir -p debian/build/tcl
	cd debian/build/tcl && ../../../configure $(commonconfflags) \
	    --with-tcl TCLSH=$(TCLSH) TCL_LIB=/usr/lib/tcltk

	touch $@

build: build-arch build-indep
build-arch: build-stamp
build-indep: build-stamp
build-stamp: configure
	dh_testdir
	for python in $(PYTHON_VERSIONS); do \
	    set -e; \
	    $(MAKE) -C debian/build/$$python ; \
	    $(MAKE_CHECK) -C debian/build/$$python ; \
	done
	for v in $(PHP_VERSIONS); do \
	    if test -x /usr/bin/php-config$$v ; then \
		set -e; \
		$(MAKE) -C debian/build/php$$v ; \
		$(MAKE_CHECK) -C debian/build/php$$v ; \
	    fi \
	done
	for v in $(RUBY_VERSIONS); do \
	    set -e; \
	    $(MAKE) -C debian/build/ruby$$v ; \
	    $(MAKE_CHECK) -C debian/build/ruby$$v ; \
	done
	$(MAKE) -C debian/build/tcl
	$(MAKE_CHECK) -C debian/build/tcl
	touch $@

install: DH_OPTIONS=
install: build
	dh_testdir
	dh_testroot
	dh_prep
	dh_installdirs

	# Install the files under 'debian/tmp'.
	for python in $(PYTHON_VERSIONS); do \
	    set -e; \
	    $(MAKE) -C debian/build/$$python DESTDIR=$(CURDIR)/debian/tmp install; \
	done

	# Install xapian.php in /usr/share/php for PHP5 so that it's in the
	# PHP include_path.
	#
	# Always install /etc/xapian/phpN/conf.d/xapian.ini, even for backports
	# to suites where PHP doesn't support it - the extra file is harmless,
	# and it means we'll work nicely with backported PHP packages too.
	for v in $(PHP_VERSIONS); do \
	    c=/usr/bin/php-config$$v; \
	    if test -x $$c ; then \
		set -e; \
		$(MAKE) -C debian/build/php$$v DESTDIR=$(CURDIR)/debian/tmp \
		    phpincdir=/usr/share/php`echo $$v|tr -d 5` install; \
		install -d -m 755 debian/tmp/etc/php$$v/conf.d; \
		install -m 644 debian/etc-php-conf.d-xapian.ini debian/tmp/etc/php$$v/conf.d/xapian.ini; \
	    fi \
	done

	for v in $(RUBY_VERSIONS); do \
	    set -e; \
	    $(MAKE) -C debian/build/ruby$$v DESTDIR=$(CURDIR)/debian/tmp install; \
	done

	$(MAKE) -C debian/build/tcl DESTDIR=$(CURDIR)/debian/tmp install

	# Reads the '*.install' files to decide where to install everything.
	dh_install --sourcedir=debian/tmp --fail-missing $(DH_INSTALL_EXCLUDE)

binary: binary-arch
binary-arch: DH_OPTIONS=-a
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_installdocs
	dh_installexamples
	dh_installmenu
	dh_installman
	dh_installchangelogs ChangeLog
	dh_strip
	dh_link
	dh_compress
	dh_fixperms
	dh_makeshlibs
ifeq ($(USING_PYCENTRAL), 1)
	DH_PYCENTRAL=include-links dh_pycentral
else
	dh_python2
endif
	dh_installdeb

	dh_shlibdeps
	# Rewrite the dependency on libxapianN to be >= our version, since
	# we may require features added in that version.
	sed -i \
	    's/^shlibs:Depends=.*libxapian[0-9]\+/& (>= $(XAPIAN_VERSION))/' \
	    debian/*.substvars

	for v in $(PHP_VERSIONS); do \
	    c=/usr/bin/php-config$$v; \
	    if test -x $$c ; then \
		set -e; \
		echo "php$$v:Depends=phpapi-`$$c --phpapi`, php$$v-common" >> debian/php$$v-xapian.substvars; \
	    fi \
	done

	# lenny/hardy onwards have a "tcl" dummy package which pulls in the
	# package for the current preferred version.  "tclsh" is a virtual
	# package which the Debian Tcl/Tk Policy recommends we specify as an
	# alternative to allow us to work with all available Tcl/Tk versions:
	# http://pkg-tcltk.alioth.debian.org/tcltk-policy.html/ch-module_packages.html
	echo "tcl:Depends=tcl|tclsh" >> debian/tclxapian.substvars

	dh_gencontrol
	dh_md5sums
	dh_builddeb

binary-indep:
	echo "Nothing to do!"

clean:
	dh_testdir
	dh_testroot
	rm -rf debian/build
	rm -f config.sub config.guess
	dh_clean

.PHONY: maint maintclean configure build install binary binary-arch binary-indep clean
